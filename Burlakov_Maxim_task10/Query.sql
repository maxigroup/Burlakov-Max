--  1.1
SELECT ORDERID, to_char(shippedDate, 'yyyy-mm-dd') SHIPPEDDATE, SHIPVIA
    FROM ORDERS
    WHERE SHIPPEDDATE > to_date('1998-05-05', 'yyyy-mm-dd')
    AND SHIPVIA >= 2;

--  1.2
SELECT ORDERID, NVL(to_char(SHIPPEDDATE),'Not shipped'), CASE WHEN SHIPPEDDATE IS NULL THEN 'Not shipped' END
    FROM ORDERS
    WHERE SHIPPEDDATE IS NULL;
    
--  1.3
SELECT ORDERID, NVL(to_char(SHIPPEDDATE,'dd.mm.yyyy'),'Not shipped') AS "Shipped Date"
    FROM ORDERS
    WHERE SHIPPEDDATE > to_date('1998-05-05','yyyy-mm-dd')
    OR SHIPPEDDATE IS NULL;

--  2.1
SELECT COMPANYNAME || ', ' || CONTACTNAME AS "Customer", COUNTRY
    FROM CUSTOMERS
    WHERE COUNTRY IN ('USA','Canada');

--  2.2
SELECT COMPANYNAME || ', ' || CONTACTNAME AS "Customer", COUNTRY
    FROM CUSTOMERS
    WHERE COUNTRY NOT IN ('USA','Canada')
    ORDER BY "Customer" DESC;

--  2.3
SELECT DISTINCT COUNTRY
    FROM CUSTOMERS
    ORDER BY COUNTRY DESC;

--  3.1
SELECT DISTINCT ORDERID
    FROM ORDER_DETAILS
    WHERE QUANTITY BETWEEN 3 AND 10;

--  3.2
SELECT CUSTOMERID, COUNTRY
    FROM CUSTOMERS
    WHERE COUNTRY BETWEEN 'B' AND 'H'
    ORDER BY COUNTRY;

--  3.3
SELECT CUSTOMERID, COUNTRY
    FROM CUSTOMERS
    WHERE COUNTRY >= 'B' AND COUNTRY <= 'H'
    ORDER BY COUNTRY;
--  запросы эквивалентны

--  4.1
SELECT PRODUCTID, PRODUCTNAME 
    FROM PRODUCTS
    WHERE LOWER(PRODUCTNAME) LIKE '%cho%olade%';

--  5.1
SELECT LTRIM(TO_CHAR(SUM(UNITPRICE * QUANTITY * (1 - DISCOUNT)),'$999,999,999,999,999.99')) AS "Totals"
    FROM ORDER_DETAILS;

--  5.2
SELECT COUNT(*) - COUNT(SHIPPEDDATE)
    FROM ORDERS;

--  5.3
SELECT COUNT(DISTINCT CUSTOMERID)
    FROM ORDERS;

--  6.1
SELECT EXTRACT(YEAR FROM ORDERDATE) AS "Year", COUNT(ORDERID) AS "Total"
    FROM ORDERS
    GROUP BY ROLLUP(EXTRACT(YEAR FROM ORDERDATE));
--Проверочный запрос:
SELECT COUNT(*) FROM ORDERS;

--  6.2
SELECT (SELECT E.LASTNAME || ' ' || E.FIRSTNAME
            FROM EMPLOYEES E
            WHERE E.EMPLOYEEID = O.EMPLOYEEID
        ) AS "Seller",
        COUNT(ORDERID) AS "Amount"
    FROM ORDERS O
    GROUP BY EMPLOYEEID
    ORDER BY "Amount" DESC;

--  6.3
SELECT * 
    FROM (
        SELECT COUNTRY AS "Country", COUNT(DISTINCT CUSTOMERID) AS "Count"
            FROM CUSTOMERS
            GROUP BY COUNTRY
            ORDER BY "Count" DESC
    )
    WHERE ROWNUM <= 5;

--  6.4
SELECT NVL((SELECT EMPLOYEES.LASTNAME || ' ' || EMPLOYEES.FIRSTNAME
            FROM EMPLOYEES
            WHERE ORDERS.EMPLOYEEID = EMPLOYEES.EMPLOYEEID
        ),'ALL') AS "Seller",
        NVL((SELECT CUSTOMERS.COMPANYNAME
            FROM CUSTOMERS
            WHERE ORDERS.CUSTOMERID = CUSTOMERS.CUSTOMERID
        ),'ALL') AS "Customer",
        COUNT(*) AS "Amount"
    FROM ORDERS
    WHERE EXTRACT(YEAR FROM ORDERDATE) = 1998
    GROUP BY CUBE(EMPLOYEEID, CUSTOMERID)
    ORDER BY "Seller" ASC, "Customer" ASC, "Amount" DESC;

--  6.5.1
SELECT *
    FROM (
        SELECT COMPANYNAME AS "Person", 'Customer' AS "Type", City AS "City"
            FROM CUSTOMERS
            WHERE EXISTS (SELECT * FROM EMPLOYEES WHERE EMPLOYEES.CITY = CUSTOMERS.CITY)
        UNION
        SELECT LASTNAME || ' ' || FIRSTNAME AS "Person", 'Seller' AS "Type", City AS "City"
            FROM EMPLOYEES
            WHERE EXISTS (SELECT * FROM CUSTOMERS WHERE CUSTOMERS.CITY = EMPLOYEES.CITY)
    )
    ORDER BY "City", "Person";

--  6.5.2
SELECT *
    FROM (
        SELECT COMPANYNAME AS "Person", 'Customer' AS "Type", City AS "City"
            FROM CUSTOMERS
            WHERE CITY IN (SELECT City AS "City" FROM CUSTOMERS
                            INTERSECT
                            SELECT City AS "City" FROM EMPLOYEES)
        UNION
        SELECT LASTNAME || ' ' || FIRSTNAME AS "Person", 'Seller' AS "Type", City AS "City"
            FROM EMPLOYEES
            WHERE CITY IN (SELECT City AS "City" FROM CUSTOMERS
                            INTERSECT
                            SELECT City AS "City" FROM EMPLOYEES)
    )
    ORDER BY "City", "Person";

--  6.6.1
SELECT DISTINCT CUSTOMERID, CITY
    FROM CUSTOMERS C1
    WHERE EXISTS (SELECT * FROM CUSTOMERS C2 WHERE C1.CITY = C2.CITY AND C1.CUSTOMERID <> C2.CUSTOMERID);
--  6.6.2
SELECT DISTINCT C1.CUSTOMERID, C1.CITY
    FROM CUSTOMERS C1, CUSTOMERS C2
    WHERE C1.CITY = C2.CITY
    AND C1.CUSTOMERID <> C2.CUSTOMERID;
-- Проверка:
SELECT CITY, COUNT(*) AS "Count"
    FROM CUSTOMERS
    GROUP BY CITY
    HAVING COUNT(*) > 1;

--  6.7
SELECT LASTNAME AS "User Name",
    (SELECT LASTNAME FROM EMPLOYEES E2 WHERE E2.EMPLOYEEID = E1.REPORTSTO) AS "Boss"
    FROM EMPLOYEES E1;
--	Выбираются все продавцы

--  7.1
SELECT LASTNAME, T.TERRITORYDESCRIPTION
    FROM EMPLOYEES E
    JOIN EMPLOYEETERRITORIES ET ON E.EMPLOYEEID = ET.EMPLOYEEID
    JOIN TERRITORIES T ON ET.TERRITORYID = T.TERRITORYID
    WHERE T.REGIONID IN (
        SELECT REGIONID
        FROM REGION
        WHERE REGIONDESCRIPTION = 'Western'
    );

--  8.1
SELECT NVL(C.COMPANYNAME,'Total:') AS "Customer", COUNT(O.ORDERID) AS "Count"
    FROM CUSTOMERS C
    LEFT JOIN ORDERS O ON O.CUSTOMERID = C.CUSTOMERID
    GROUP BY ROLLUP(C.COMPANYNAME)
    ORDER BY "Count";

--  9.1
SELECT COMPANYNAME
    FROM SUPPLIERS
    WHERE SUPPLIERID IN (
        SELECT SUPPLIERID
        FROM PRODUCTS
        WHERE UNITSINSTOCK = 0
    );
--  можно использовать оператор "=" вместо "IN", только в том случае,
--	когда вложенный запрос должен вернуть только одну запись.

--  10.1
SELECT (SELECT E.LASTNAME || ' ' || E.FIRSTNAME
            FROM EMPLOYEES E
            WHERE E.EMPLOYEEID = O.EMPLOYEEID) AS "Seller"
    FROM ORDERS O
    GROUP BY O.EMPLOYEEID
    HAVING COUNT(*) > 150;

--  11.1
SELECT C.COMPANYNAME
    FROM CUSTOMERS C
    WHERE NOT EXISTS (SELECT CUSTOMERID FROM ORDERS O WHERE O.CUSTOMERID = C.CUSTOMERID);

--  12.1
SELECT DISTINCT SUBSTR(LASTNAME,1,1) AS "LETTER"
    FROM EMPLOYEES
    ORDER BY LETTER;
    
--  13	Разработка функций и процедур

--  13.1
BEGIN
    GREATESTORDERS(1998);
END;
/

--  13.2
BEGIN
    SHIPPEDORDERSDIFF();
END;
/

--  13.3
BEGIN
    SUBORDINATIONINFO(5);
END;
/
--  Проверка:
SELECT EMPLOYEEID, LPAD(' ', 2 * (LEVEL-1)) || LASTNAME || ' ' || FIRSTNAME AS "NAME"
    FROM EMPLOYEES
    START WITH REPORTSTO IS NULL
    CONNECT BY PRIOR EMPLOYEEID = REPORTSTO
    ORDER SIBLINGS BY (LASTNAME || ' ' || FIRSTNAME);

--  13.4
SELECT EMPLOYEEID, LASTNAME || ' ' || FIRSTNAME AS "NAME", ISBOSS(EMPLOYEEID) AS "SUBORDINAL COUNT"
    FROM EMPLOYEES;